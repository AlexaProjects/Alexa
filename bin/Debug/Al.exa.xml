<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Al.exa</name>
    </assembly>
    <members>
        <member name="T:Alexa.Utilities.LogUtils">
            <summary>
            Provides utilities to write log
            </summary>
        </member>
        <member name="M:Alexa.Utilities.LogUtils.Init">
            <summary>
            Initialize Log
            </summary>
        </member>
        <member name="M:Alexa.Utilities.LogUtils.Write(System.Exception)">
            <summary>
            Write a string into the log file
            </summary>
            <param name="ex">The method Exception</param>
        </member>
        <member name="M:Alexa.Utilities.LogUtils.Write(System.Diagnostics.StackFrame,Alexa.Utilities.LogUtils.ErrorLevel,System.String)">
            <summary>
            Write a string into the log file
            </summary>
            <param name="stackFrame">The StackFrame of  method</param>
            <param name="errorLevel">The error level</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Alexa.Utilities.LogUtils.Write(System.String,System.String,System.Int32,Alexa.Utilities.LogUtils.ErrorLevel,System.String)">
            <summary>
            Write a string into the log file
            </summary>
            <param name="className">The class that returned the error</param>
            <param name="methodName">The method that returned the error</param>
            <param name="line">Theline of error</param>
            <param name="errorLevel">The error level</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Alexa.Utilities.CryptoUtils.Init">
            <summary>
            Init the CryptoUtils class
            </summary>
        </member>
        <member name="M:Alexa.Utilities.CryptoUtils.DecryptString(System.String)">
            <summary>
            Decrypt a string
            </summary>
            <param name="cipherString">text to decrypt</param>
            <returns>returns plain text</returns>
        </member>
        <member name="T:Alexa.Utilities.CoreUtils">
            <summary>
            Provides functions to interact with the Core of Al'exa
            </summary>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.Init">
            <summary>
            Initialize the CoreUtils class
            </summary>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.RunSteps(System.Xml.XmlNodeList)">
            <summary>
            Runs the steps that are written into the config file
            </summary>
            <param name="steps">Steps that are written into the config file</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepRunExe(System.Xml.XmlNode)">
            <summary>
            Runs the method that executes the run type step
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
            <returns>return true if the executables was execute</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractInputBox">
            <summary>
            Runs the method that does a click type step on an input box
            </summary>
            <returns>return true if the input box was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractDropDownList">
            <summary>
            Runs the method that does a click type step on an Drop Down List
            </summary>
            <returns>return true if the Drop Down List was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractGenericBox">
            <summary>
            Runs the method that does a click type step on a generic box
            </summary>
            <returns>return true if the generic box was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractIcon(System.Xml.XmlNode)">
            <summary>
            Runs the method that does a click type step on an icon
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
            <returns>return true if the generic box was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractButton">
            <summary>
            Runs the method that does a click type step on a button
            </summary>
            <returns>return true if the button was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractIconListItem">
            <summary>
            Runs the method that does a click type step on a List Menu Item
            </summary>
            <returns>return true if the List Menu Item was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepInteractText">
            <summary>
            Runs the method that does a click type step on an input box
            </summary>
            <returns>return true if the text was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.InsertText(System.Xml.XmlNode)">
            <summary>
            Runs the method that insert text
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepMouseMove(System.Xml.XmlNode)">
            <summary>
            Runs the method that insert text
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.StepMouseClick(System.Xml.XmlNode)">
            <summary>
            Runs the method that click the mouse
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ExecDelay(System.Xml.XmlNode)">
            <summary>
            Runs the method that executes Delay
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ChangeStepBehavior(System.Xml.XmlNode)">
            <summary>
            Runs the method that can change some option
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
            <returns>return true if the text was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.PutToClipboard(System.Xml.XmlNode)">
            <summary>
            Runs the method that will copy text to clipBoard
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.GetBindRegionPoints">
            <summary>
            Get the points of interest from the core source image
            </summary>
            <returns>the points of interest</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ClickAndInsert(System.Int32,System.Int32,System.String)">
            <summary>
            Move the mouse, click and write text
            </summary>
            <param name="x">x coordinate of the mouse</param>
            <param name="y">y coordinate of the mouse</param>
            <param name="text">the text to write</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.SelectListItem(System.Int32,System.Int32,System.String)">
            <summary>
            Move the mouse, click and write text
            </summary>
            <param name="x">x coordinate of the mouse</param>
            <param name="y">y coordinate of the mouse</param>
            <param name="text">the text to write</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.Click(System.Int32,System.Int32)">
            <summary>
            Move the mouse and click
            </summary>
            <param name="x">x coordinate of the mouse</param>
            <param name="y">y coordinate of the mouse</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.CropRect(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Crops a portion of the image
            </summary>
            <param name="original">the original image</param>
            <param name="rect">the rectangle to crop</param>
            <returns>return the cropped image</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ResizeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Resize an image
            </summary>
            <param name="image">the original image</param>
            <param name="size">the new size</param>
            <returns>return the resized image</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.checkStringByOCR(System.Drawing.Bitmap,System.String)">
            <summary>
            Search a string into an image
            </summary>
            <param name="image">the image</param>
            <param name="inputString">the string to search</param>
            <returns>return true if the string was found</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ExecStepMethod(Alexa.Utilities.CoreUtils.StepType,System.Xml.XmlNode)">
            <summary>
            Runs the method that executes a step and then calculate the execution time
            </summary>
            <param name="stepType">the type of the step</param>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.ExecActionMethod(System.String,Alexa.Utilities.CoreUtils.StepType,System.Xml.XmlNode)">
            <summary>
            Runs the method that executes a step and then calculate the execution time
            </summary>
            <param name="actionName">the name of the action</param>
            <param name="stepType">the type of the step</param>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.SaveScreenshotAfterTimeOut(System.Xml.XmlNode)">
            <summary>
            Takes a screenshot of desktop if timeout has occurred
            </summary>
            <param name="alexaStep">the xml node that contains the step</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.RemoveIllegalChars(System.String)">
            <summary>
            Returns a path without illegal characters
            </summary>
            <param name="path">the path string</param>
            <returns>return the path without illegal characters</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.GetStepNameNumber(System.Xml.XmlNode)">
            <summary>
            Returns the step name or the step number
            </summary>
            <param name="stepNode">the xml node that contains the step</param>
            <returns>the step name or step number</returns>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.MaximizeWindow(System.IntPtr)">
            <summary>
            Maximize the window
            </summary>
            <param name="windowHandle">the handle to the window</param>
        </member>
        <member name="M:Alexa.Utilities.CoreUtils.AnalyzeWindow(Alexa.Utilities.CoreUtils.StepType,System.Xml.XmlNode)">
            <summary>
            Analyze all windows to find what is written into the step
            </summary>
            <param name="stepType">the step type</param>
            <param name="alexaStep">the Al'exa step node</param>
            <returns>true if what is written into the step is found</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.SetDirectoryCompression(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Set folder compression
            </summary>
            <param name="path">The path of folder to compress</param>
            <param name="compress">set true to compress the folder</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.RunExternalScript">
            <summary>
            Runs external script
            </summary>
        </member>
        <member name="P:Alexa.Utilities.SystemUtils.ScreenHeight">
            <summary>
            Get the Height of screen resolution
            </summary>
        </member>
        <member name="P:Alexa.Utilities.SystemUtils.ScreenWidth">
            <summary>
            Get the Width of screen resolution
            </summary>
        </member>
        <member name="T:Alexa.Utilities.SystemUtils.User32">
            <summary>
            Provides functions to interact with window
            </summary>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.GetActiveWindow">
            <summary>
            Get the handler of active window
            </summary>
            <returns>The handler of active window</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.GetWindow(System.String,System.IntPtr@)">
            <summary>
            Checks if a window is present
            </summary>
            <param name="regularExpression">The regular expression that is used to find the window</param>
            <param name="windowHandle">returns the handle of the window</param>
            <returns>True if window is present</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.GetWindowsCollection(System.String)">
            <summary>
            Returns all windows that their title matches the regular expression
            </summary>
            <param name="regularExpression">The regular expression that is used to find the windows</param>
            <returns>All handle of the  windows</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.ShowWindowOnTop(System.IntPtr,System.Boolean)">
            <summary>
            Brings to the foreground the window
            </summary>
            <param name="hWnd">Handle of window</param>
            <param name="maximize">Set it true if you want also to maximize the window</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.CloseWindow(System.String)">
            <summary>
            Close window
            </summary>
            <param name="regularExpression">The regular expression that is used to find the window</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.CloseWindowNew(System.String)">
            <summary>
            Close window
            </summary>
            <param name="regularExpression">The regular expression that is used to find the window</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.GetWindowHandle(System.String)">
            <summary>
            Gets the handle of the window.
            </summary>
            <param name="regularExpression">The regular expression that is used to find the window</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.HideWindow(System.IntPtr)">
            <summary>
            Hide window
            </summary>
            <param name="windowHandle">The handle of the window</param>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.User32.GetWindowProperties(System.IntPtr)">
            <summary>
            Gets the properties of the window. It returns the window coordinates, height and width.
            </summary>
            <param name="windowHandle">The handle of the window</param>
        </member>
        <member name="T:Alexa.Utilities.SystemUtils.User32.WindowProperties">
            <summary>
            Window Properties
            </summary>
        </member>
        <member name="T:Alexa.Utilities.SystemUtils.User32.WindowStruct">
            <summary>
            Window Struct
            </summary>
        </member>
        <member name="T:Alexa.Utilities.SystemUtils.User32.WindowAppearanceStyle">
            <summary>
            Window show style
            </summary>
        </member>
        <member name="T:Alexa.Utilities.SystemUtils.ProcessUtils">
            <summary>
            Provides functions to interact with system processes
            </summary>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.ProcessUtils.GetUserProcesses(System.String,System.String)">
            <summary>
            Get all processes that belong to specific user
            </summary>
            <param name="userDomain">The domain of the user</param>
            <param name="userName">The user name</param>
            <returns>The list that contains the pid of the process</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.ProcessUtils.GetUserProcessesByRegEx(System.String,System.String,System.String)">
            <summary>
            Get all processes that belong to specific user and their name matches the regular expression
            </summary>
            <param name="userDomain">The domain of the user</param>
            <param name="userName">The user name</param>
            <param name="regularExpression">The regular expression</param>
            <returns>The list that contains the pid of the process</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.ProcessUtils.GetUserProcessesByName(System.String,System.String,System.String)">
            <summary>
            Get all processes that belong to a specific user and their name is like process name passed as argument
            </summary>
            <param name="userDomain">The domain of the user</param>
            <param name="userName">The user name</param>
            <param name="procName">The name (or a part of the name) of the processes to seach</param>
            <returns>The list that contains the pid of the process</returns>
        </member>
        <member name="M:Alexa.Utilities.SystemUtils.ProcessUtils.KillProcess(System.UInt32)">
            <summary>
            Kill a process by Pid
            </summary>
            <param name="pid">The process pid</param>
        </member>
        <member name="T:Alexa.Utilities.ScreenUtils">
            <summary>
            Provides functions to capture single windows or the entire desktop.
            </summary>
        </member>
        <member name="M:Alexa.Utilities.ScreenUtils.CaptureDesktop">
            <summary>
            Creates a Bitmap containing the entire desktop image
            </summary>
            <returns>Bitmap containing the entire desktop image</returns>
        </member>
        <member name="M:Alexa.Utilities.ScreenUtils.CaptureWindow(System.IntPtr)">
            <summary>
            Creates a Bitmap containing the screen of the window
            </summary>
            <param name="handle">The handle of the window.</param>
            <returns>Bitmap containing the screen of the window</returns>
        </member>
        <member name="M:Alexa.Utilities.ScreenUtils.CaptureWindowByHandle(System.IntPtr)">
            <summary>
            Creates a Bitmap containing the screen of the window
            </summary>
            <param name="handle">The handle to the window.</param>
            <returns>Bitmap containing the screen of the window</returns>
        </member>
        <member name="T:Alexa.Utilities.ScreenUtils.User32">
            <summary>
            User32 API functions
            </summary>
        </member>
        <member name="T:Alexa.Utilities.ScreenUtils.Gdi32">
            <summary>
            Gdi32 API functions
            </summary>
        </member>
        <member name="M:Alexa.Utilities.OutputUtils.Finish(System.Boolean)">
            <summary>
            Print the output and exit from the program
            </summary>
        </member>
        <member name="M:Alexa.Utilities.OutputUtils.DateTimeToUnixTimestamp(System.DateTime)">
            <summary>
            Converts a DateTime into a Unix Timestamp
            </summary>
            <param name="dateTime">The DateTime to convert</param>
            <returns>The Unix Timestamp</returns>
        </member>
        <member name="T:Alexa.Utilities.ConfigUtils">
            <summary>
            Provides functions to read from the config file (aka test case file).
            </summary>
        </member>
        <member name="M:Alexa.Utilities.ConfigUtils.Init(System.String)">
            <summary>
            Initialize the config class
            </summary>
            <param name="filename">The full path of the config file</param>
        </member>
        <member name="M:Alexa.Utilities.ConfigUtils.GetAction(System.String)">
            <summary>
            Get the timeout actions of the test case
            </summary>
            <param name="actionName">the name of the action that you have to execute</param>
            <returns>The action node</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.HomeFolder">
            <summary>
            Get the home folder
            </summary>
            <returns>The home folder</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.LogIsEnabled">
            <summary>
            Get if Log is enabled 
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.ErrorLevel">
            <summary>
            Get the Log ErrorLevel
            </summary>
            <returns>Error Level</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.LogFolder">
            <summary>
            Get the Log folder
            </summary>
            <returns>The log folder</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.AlexaSteps">
            <summary>
            Get the steps of the test case
            </summary>
            <returns>The steps</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.Global">
            <summary>
            Get the global node
            </summary>
            <returns>The global node</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.OcrLanguageData">
            <summary>
            Get the folder of the OCR language data
            </summary>
            <returns>Language data folder</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.OcrSelectedLanguage">
            <summary>
            Get the selected OCR language
            </summary>
            <returns>The selected OCR language</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.OutputOnFile">
            <summary>
            Check if output on file is enabled
            </summary>
            <returns>true if output on file is enabled</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.OutputFolder">
            <summary>
            Get the Output folder
            </summary>
            <returns>the output folder</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.OutputTimeoutHandler">
            <summary>
            Get the output timeout handler mode
            </summary>
            <returns>the handler mode</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.WindowTitleToClose">
            <summary>
            Get the regular expression containing the title of window(s) to close
            </summary>
            <returns>the regular expression</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.ProcessesToKill">
            <summary>
            Get the regular expression containing the name of processes to kill
            </summary>
            <returns>the regular expression</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.GetProgramsToRun">
            <summary>
            Get the the program to run after Al'exa
            </summary>
            <returns>the run nodes</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.GetProcessesToKillAtStartTime">
            <summary>
            Get the process to kill before the execution of the steps
            </summary>
            <returns>the proccess node list</returns>
        </member>
        <member name="P:Alexa.Utilities.ConfigUtils.GetWindowsToCloseAtStartTime">
            <summary>
            Get the windows to close before the execution of the steps
            </summary>
            <returns>the proccess node list</returns>
        </member>
        <member name="M:Alexa.Program.CheckTimeout">
            <summary>
            Checks the global timeout
            </summary>
        </member>
        <member name="M:Alexa.Program.WarmUp">
            <summary>
            Execute the method that clean the desktop
            </summary>
        </member>
        <member name="M:Alexa.Program.Finish(System.Boolean)">
            <summary>
            Execute the method that save the output
            </summary>
            <param name="exception">set it true if you call this method on an unkown error</param>
        </member>
    </members>
</doc>
